[
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to satoshi.nakamoto.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain satoshi.nakamoto.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to yearn.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain yearn.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to maker.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 50 COMP to the ENS domain 'maker.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 BTC, then use BTC to buy NFT on OpenSea\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"unsupported\",\n    \"message\": \"Buying NFTs on OpenSea is outside the scope of the agents available.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to yearn.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain yearn.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to yearn.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain yearn.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 0.2 ETH for AAVE, then stake AAVE in Aave Protocol\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"unsupported\",\n    \"message\": \"Staking AAVE in Aave Protocol is outside the scope of the available agent's capabilities.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 BTC, then swap BTC to 5000 USDC, and finally send 100 USDC to satoshi.nakamoto.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"unsupported\",\n    \"message\": \"Swapping directly to BTC (Bitcoin) is not supported within the Ethereum network as BTC is not an ERC20 token. Please specify a swap to an Ethereum-based token, such as Wrapped Bitcoin (WBTC), instead of direct BTC.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 BTC, then swap BTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"unsupported\",\n    \"message\": \"BTC is not an ERC-20 token and cannot be directly swapped or managed within the Ethereum network as described. Please specify a token swap from ETH to an ERC-20 equivalent of Bitcoin, such as Wrapped Bitcoin (WBTC) or another token, instead of BTC.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 0.2 ETH for AAVE\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"missing_info\",\n    \"message\": \"The amount of AAVE to be received from swapping 0.2 ETH is missing. Please specify the desired amount of AAVE to complete the goal.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 BTC, then use BTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"missing_info\",\n    \"message\": \"The symbol for Bitcoin in the context of Ethereum transactions is not provided. Typically, Bitcoin represented on Ethereum is as Wrapped Bitcoin (WBTC). Please confirm if BTC refers to Wrapped Bitcoin (WBTC) or another token.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 2 ETH for DAI, then send 500 DAI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Swap 2 Ethereum (ETH) for DAI, ensuring the amount of ETH is properly exchanged for DAI. Following the swap, transfer 500 DAI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 1.5 ETH for Uniswap (UNI), ensuring an appropriate amount of ETH is swapped for UNI. After successfully acquiring the UNI tokens, transfer 200 UNI to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap from Ethereum (ETH) to Chainlink (LINK), ensuring the acquisition of 50 LINK. Following the swap, transfer 25 LINK from the user's address to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap from Ethereum (ETH) to acquire 50 Chainlink (LINK) tokens. After acquiring the LINK tokens, proceed to send 25 of those LINK tokens to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), aiming to receive exactly 1000 USDC from the swap. Following these transactions, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 50 Chainlink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, and after acquiring the LINK, send 25 LINK from this address to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 2 ETH for DAI, then send 500 DAI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap from ETH to DAI for an amount of 2 ETH for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, ensuring the user receives DAI in return. Following the successful swap, proceed to transfer 500 DAI from the user's address to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 50 Chainlink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 25 LINK to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), intending to acquire exactly 1000 USDC from the swap. Following these transactions, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 50 Chainlink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 25 LINK from this address to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 50 Chainlink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 25 LINK to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 1.5 ETH to Uniswap (UNI), ensuring the right amount of ETH is used to get UNI for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006. After the swap is successful, transfer 200 UNI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 1.5 ETH for Uniswap (UNI), ensuring the right amount of ETH is swapped for UNI. After successfully swapping to UNI, transfer 200 UNI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 2 ETH for DAI, then send 500 DAI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 2 ETH for DAI, ensuring the correct amount of ETH is swapped for DAI. After successfully swapping to DAI, transfer 500 DAI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 50 Chainlink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then send 25 LINK from the same address to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 2 ETH for DAI, then send 500 DAI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 2 ETH for DAI, ensuring the right amount of ETH is swapped to obtain DAI. After successfully swapping to DAI, transfer 500 DAI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to buy USD Coin (USDC) with WBTC, making sure to receive exactly 1000 USDC from this transaction. Following these transactions, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 2 ETH for DAI, then send 500 DAI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap from 2 ETH to DAI, ensuring the correct amount of ETH is swapped for DAI. Following the swap, transfer 500 DAI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap from Ethereum (ETH) to Uniswap (UNI) using 1.5 ETH from the user's address. After the swap is completed, transfer 200 UNI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then send 50 COMP from this address to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 2 ETH for DAI, then send 500 DAI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 2 ETH to DAI for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006. After successfully swapping to DAI, transfer 500 DAI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 2 ETH for DAI, then send 500 DAI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap from ETH to DAI for an amount equivalent to 2 ETH from the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006. After the swap, transfer 500 DAI to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), aiming to receive exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 1.5 ETH for Uniswap (UNI), ensuring the right amount of ETH is swapped to acquire UNI. After successfully swapping to UNI, transfer 200 UNI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 50 Chainlink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 25 LINK to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then send 50 COMP to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 50 Chainlink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then send 25 LINK to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 1.5 ETH for Uniswap (UNI) tokens, ensuring the right amount of ETH is swapped to acquire the UNI tokens desired. After obtaining the UNI tokens, transfer 200 UNI from the user's address (0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006) to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 50 Chainlink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 25 LINK to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap from 1.5 ETH to Uniswap (UNI) tokens for the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006. After acquiring the UNI tokens, transfer 200 UNI to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap of 1.5 ETH for UNI for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, ensuring the swap is processed correctly to obtain UNI tokens. After acquiring UNI tokens, proceed to send 200 UNI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), aiming to receive exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), ensuring to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 50 Chainlink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then send 25 LINK from the same address to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), aiming to acquire exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 1.5 ETH for UNI tokens, making sure to swap the right amount of ETH to get UNI tokens for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006. After acquiring UNI, transfer 200 UNI tokens from this address to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap from 1.5 ETH to Uniswap (UNI) tokens for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006. After completing the swap, transfer 200 UNI tokens from the same address to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), aiming to receive exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap from Ethereum (ETH) to 50 Chainlink (LINK), ensuring the right amount of ETH is swapped for exactly 50 LINK. Following the swap, transfer 25 LINK from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap from ETH to Uniswap (UNI), ensuring to swap exactly 1.5 ETH for UNI. After successfully swapping to UNI, transfer 200 UNI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to buy 1000 USD Coin (USDC) with WBTC, making sure to receive exactly 1000 USDC from the purchase. Following these transactions, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) tokens for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 50 COMP to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), aiming to receive exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 50 Chainlink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 25 LINK to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 1.5 ETH for UNI tokens, ensuring the right amount of ETH is used for the swap. After successfully acquiring UNI tokens, transfer 200 UNI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 50 Chainlink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 25 LINK to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x4e73f1FD2BBfFb18421F956509c82D6754250eAb\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x4e73f1FD2BBfFb18421F956509c82D6754250eAb\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x4e73f1FD2BBfFb18421F956509c82D6754250eAb\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x4e73f1FD2BBfFb18421F956509c82D6754250eAb\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x4e73f1FD2BBfFb18421F956509c82D6754250eAb\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x4e73f1FD2BBfFb18421F956509c82D6754250eAb\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x4e73f1FD2BBfFb18421F956509c82D6754250eAb\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x4e73f1FD2BBfFb18421F956509c82D6754250eAb\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x4e73f1FD2BBfFb18421F956509c82D6754250eAb\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 50 COMP to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 50 COMP to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to use WBTC to buy USD Coin (USDC), ensuring to acquire exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 2 ETH for DAI, then send 500 DAI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 2 ETH for DAI, ensuring the exact amount of 2 ETH is swapped for DAI. After the swap, transfer 500 DAI to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap from Ethereum (ETH) to acquire 50 ChainLink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006. After acquiring the LINK tokens, proceed to send 25 LINK to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then send 50 COMP from this address to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then send 50 COMP to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 50 Chainlink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006. After the swap, send 25 LINK from the same address to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then send 50 COMP from this address to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 50 LINK with ETH, then send 25 LINK to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 50 Chainlink (LINK) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 25 LINK to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is used to obtain exactly 0.03 WBTC. Then, swap the obtained WBTC to USD Coin (USDC), aiming to acquire exactly 1000 USDC from this swap. Lastly, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'. Ensure all actions are performed from the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 1.5 ETH for Uniswap (UNI), ensuring the correct amount of ETH is swapped for UNI. After the swap, transfer 200 UNI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006. After the swap, send 50 COMP to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to use the WBTC to buy USD Coin (USDC), aiming to acquire exactly 1000 USDC from the transaction. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then send 50 COMP to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 2 ETH for DAI, then send 500 DAI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 2 Ethereum (ETH) for DAI, ensuring the right amount of ETH is swapped for an equivalent DAI value. After successfully swapping to DAI, transfer 500 DAI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap from 1.5 ETH to Uniswap (UNI) tokens for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006. After obtaining the UNI tokens, transfer 200 UNI to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 2 ETH for DAI, then send 500 DAI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 2 ETH for DAI, ensuring the right amount of ETH is swapped for DAI. After successfully swapping to DAI, transfer 500 DAI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 2 ETH for DAI, then send 500 DAI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 2 ETH to DAI for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, ensuring the right amount of ETH is converted to DAI. After completing the swap, transfer 500 DAI to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap from Ethereum (ETH) to Uniswap (UNI), using 1.5 ETH for the swap from the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006. After acquiring UNI, transfer 200 UNI to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then send 50 COMP to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 2 ETH for DAI, then send 500 DAI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap 2 ETH for DAI, ensuring the right amount of ETH is used to receive DAI. After successfully swapping for DAI, transfer 500 DAI to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then send 50 COMP to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from 1.5 ETH to Uniswap (UNI) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 200 UNI to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 50 COMP to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 100 USDC with ETH\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap 1.5 ETH for UNI, then send 200 UNI to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, execute a swap of 1.5 ETH for Uniswap (UNI), ensuring the right amount of ETH is swapped for UNI. After successfully swapping to UNI, transfer 200 UNI to the ENS domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), aiming to acquire exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.03 WBTC, then use WBTC to buy 1000 USDC, and finally send 500 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.03 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.03 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 500 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 0.5 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 0.5 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then send 50 COMP to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Swap ETH to 0.1 WBTC, then swap WBTC to 5000 USDC, and finally send 100 USDC to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.1 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.1 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 5000 USDC from the swap. Following these swaps, transfer 100 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 2 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 2 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Send 1 ETH to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006 to the ENS domain vitalik.eth.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    },
    {
        "conversations": [
            {
                "role": "user",
                "content": "\nYou are a task assignment expert. You are good at analyzing the user's chat records to complete the task goals and conditions represented in the user's chat records.\nYou must analyze the prompt and define a goal to be executed by the agents.\nIf the prompt is not clear or missing information, you MUST ask for more information.\nIf the prompt is invalid, unsupported or outside the scope of the agents, you MUST ask for a new prompt.\nAlways ensure you have all the information needed to define the goal that can be executed without prior context.\n When dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n\nThe available agents and tools:\nAgent name: send-tokens\nRole: Ethereum token specialist\nTools available:\n  - Name: Prepare transfer ERC20 token transaction\n  - Description: Prepare transfer ERC20 token transaction(amount: 'number', receiver: 'string', token: 'string') -  Prepares a transfer transaction for given amount in decimals for given token  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain     token (str): Symbol of token to transfer Returns:     str: Preview of the prepared transaction  \n\n  - Name: Prepare transfer ETH transaction\n  - Description: Prepare transfer ETH transaction(amount: 'number', receiver: 'string') -  Prepares a transfer transaction for given amount in decimals for ETH  Args:     amount (float): Amount given by the user to transfer. The function will take     care of converting the amount to needed decimals.     receiver (str): The receiver's address or ENS domain Returns:     str: Preview of the prepared transaction  \n\n  - Name: Get ERC20 balance\n  - Description: Get ERC20 balance(token: 'string', owner: 'string') -  Check owner balance in ERC20 token  :param token: str, token symbol of erc20 :param owner: str, the token owner's address or ENS domain  :result balance: float, the balance of owner in erc20 contract  \n\n  - Name: Get ETH balance\n  - Description: Get ETH balance(owner: 'string') -  Check owner balance in ETH  :param owner: str, the owner's address or ENS domain  :result balance: float, the balance of owner in ETH  \n\nAgent name: swap-tokens\nRole: Expert in swapping tokens\nTools available:\n  - Name: Prepare needed transactions to execute swap with exact input\n  - Description: Prepare needed transactions to execute swap with exact input(exact_amount_in: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_in (float): Amount of token_in given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n  - Name: Prepare needed transactions to execute swap with exact output\n  - Description: Prepare needed transactions to execute swap with exact output(exact_amount_out: 'number', token_in: 'string', token_out: 'string') -  Encodes approve, if necessary and swap transactions. The function will only add the approve transaction if the address does not have enough allowance  Args:     exact_amount_out (float): Amount of token_out given by the user to trade. The function will take care of converting the amount     to needed decimals.     token_in (str): Symbol of token input.     token_out (str): Symbol of token output. Returns:     str: A confirmation message that the transaction to swap tokens has been prepared  \n\n\nRespond ONLY in one of three of the following JSON formats:\n\n{\n    \"type\": \"goal\",\n    \"goal\": \"The detailed goal here. No need to mention specific agents or tools.\"\n}\n\n{\n    \"type\": \"missing_info\",\n    \"message\": \"The information that is missing here\"\n}\n\n{\n    \"type\": \"unsupported\",\n    \"message\": \"Reason why the prompt is unsupported here\"\n}\n\nPlease note: You can only output content in json format, and do not output any other content!\n\nYou can refer to the following examples:\nChat History: User: Swap ETH to 0.05 WBTC, then swap WBTC to 1000 USDC, and finally send 50 USDC to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"First, swap Ethereum (ETH) to 0.05 Wrapped Bitcoin (WBTC), ensuring the right amount of ETH is swapped for exactly 0.05 WBTC. After successfully swapping to WBTC, proceed to swap WBTC to USD Coin (USDC), making sure to receive exactly 1000 USDC from the swap. Following these swaps, transfer 50 USDC to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}\n\nChat History: User: Send 1 ETH to vitalik.eth\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Send 1 ETH from the address 0x5d15311D760511d89cFad67404131cdc155E9FDB to the ENS domain vitalik.eth.\"\n}\n\nChat History: User: Buy 100 USDC with ETH\nOutput: \n{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 100 USDC for the user's address 0x5d15311D760511d89cFad67404131cdc155E9FDB\"\n}\n\nOK, start now!\nPlease note: You can only output content in json format, and do not output any other content!\nChat History: User: Buy 200 COMP with ETH, then send 50 COMP to vitalik.eth\nOutput:\n"
            },
            {
                "role": "assistant",
                "content": "{\n    \"type\": \"goal\",\n    \"goal\": \"Execute a swap from ETH to 200 Compound (COMP) for the user's address 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006, then transfer 50 COMP to the Ethereum Name Service (ENS) domain 'vitalik.eth'.\"\n}"
            }
        ],
        "system": "\nYou are an AI assistant that helps the user define goals and tasks for your agents. \nYou can analyze prompts and provide the user with a goal to be executed by the agents.\nWhen dealing with Ethereum transactions, assume the following is the user's address: 0x1b6c7885cD9352b7E6D4D0a9A12FbfA256cF6006\n"
    }
]